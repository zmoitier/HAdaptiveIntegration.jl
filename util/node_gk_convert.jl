using StaticArrays, Printf

import HAdaptiveIntegration as HAI

simplex = HAI.Simplex((big"-1.0",), (big"1.0",))

# https://www.advanpix.com/2011/11/07/gauss-kronrod-quadrature-nodes-weights/
# 7 points Gauss rule of order 13
segment_G7 = HAI.Quadrature(
    [
        SVector(big"-9.4910791234275852452618968404785126e-01"),
        SVector(big"-7.4153118559939443986386477328078841e-01"),
        SVector(big"-4.0584515137739716690660641207696146e-01"),
        SVector(big"0.0000000000000000000000000000000000e+00"),
        SVector(big"4.0584515137739716690660641207696146e-01"),
        SVector(big"7.4153118559939443986386477328078841e-01"),
        SVector(big"9.4910791234275852452618968404785126e-01"),
    ],
    [
        big"1.2948496616886969327061143267908202e-01"
        big"2.7970539148927666790146777142377958e-01"
        big"3.8183005050511894495036977548897513e-01"
        big"4.1795918367346938775510204081632653e-01"
        big"3.8183005050511894495036977548897513e-01"
        big"2.7970539148927666790146777142377958e-01"
        big"1.2948496616886969327061143267908202e-01"
    ],
)
# 15 points Kronrod rule of order 20
segment_K15 = HAI.Quadrature(
    [
        SVector(big"-9.4910791234275852452618968404785126e-01"),
        SVector(big"-7.4153118559939443986386477328078841e-01"),
        SVector(big"-4.0584515137739716690660641207696146e-01"),
        SVector(big"0.0000000000000000000000000000000000e+00"),
        SVector(big"4.0584515137739716690660641207696146e-01"),
        SVector(big"7.4153118559939443986386477328078841e-01"),
        SVector(big"9.4910791234275852452618968404785126e-01"),
        #
        SVector(big"-9.9145537112081263920685469752632852e-01"),
        SVector(big"-8.6486442335976907278971278864092620e-01"),
        SVector(big"-5.8608723546769113029414483825872960e-01"),
        SVector(big"-2.0778495500789846760068940377324491e-01"),
        SVector(big"2.0778495500789846760068940377324491e-01"),
        SVector(big"5.8608723546769113029414483825872960e-01"),
        SVector(big"8.6486442335976907278971278864092620e-01"),
        SVector(big"9.9145537112081263920685469752632852e-01"),
    ],
    [
        big"6.3092092629978553290700663189204287e-02",
        big"1.4065325971552591874518959051023792e-01",
        big"1.9035057806478540991325640242101368e-01",
        big"2.0948214108472782801299917489171426e-01",
        big"1.9035057806478540991325640242101368e-01",
        big"1.4065325971552591874518959051023792e-01",
        big"6.3092092629978553290700663189204287e-02",
        big"2.2935322010529224963732008058969592e-02",
        big"1.0479001032225018383987632254151802e-01",
        big"1.6900472663926790282658342659855028e-01",
        big"2.0443294007529889241416199923464908e-01",
        big"2.0443294007529889241416199923464908e-01",
        big"1.6900472663926790282658342659855028e-01",
        big"1.0479001032225018383987632254151802e-01",
        big"2.2935322010529224963732008058969592e-02",
    ],
)

for quad in [segment_G7, segment_K15]
    quad_new = HAI.map_quad(quad, simplex)

    for x in quad_new.nodes
        @printf("SVector(%.35e),\n", only(x))
    end
    println()
    for x in quad_new.weights
        @printf("%.35e,\n", only(x))
    end
    println()
end
