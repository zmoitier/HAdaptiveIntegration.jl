using StaticArrays
import Printf: Format, format

import HAdaptiveIntegration as HAI

setprecision(128)

square = HAI.rectangle([big"-1.0", big"-1.0"], [big"1.0", big"1.0"])

# https://link.springer.com/article/10.1007/BF01389339

# 21 points Cools Haegemans rule of order 7
ch21 = (
    nodes=[
        [big"+0.90617984593866399280", big"+0.90617984593866399280"],
        [big"-0.90617984593866399280", big"+0.90617984593866399280"],
        [big"-0.90617984593866399280", big"-0.90617984593866399280"],
        [big"+0.90617984593866399280", big"-0.90617984593866399280"],
        #
        [big"+0.90617984593866399280", big"+0.53846931010568309104"],
        [big"-0.90617984593866399280", big"+0.53846931010568309104"],
        [big"-0.90617984593866399280", big"-0.53846931010568309104"],
        [big"+0.90617984593866399280", big"-0.53846931010568309104"],
        [big"+0.53846931010568309104", big"+0.90617984593866399280"],
        [big"+0.53846931010568309104", big"-0.90617984593866399280"],
        [big"-0.53846931010568309104", big"-0.90617984593866399280"],
        [big"-0.53846931010568309104", big"+0.90617984593866399280"],
        #
        [big"+0.53846931010568309104", big"+0.53846931010568309104"],
        [big"-0.53846931010568309104", big"+0.53846931010568309104"],
        [big"-0.53846931010568309104", big"-0.53846931010568309104"],
        [big"+0.53846931010568309104", big"-0.53846931010568309104"],
        #
        [big"+0.90617984593866399280", big" 0.00000000000000000000"],
        [big"-0.90617984593866399280", big" 0.00000000000000000000"],
        [big" 0.00000000000000000000", big"+0.90617984593866399280"],
        [big" 0.00000000000000000000", big"-0.90617984593866399280"],
        #
        [big" 0.00000000000000000000", big" 0.00000000000000000000"],
    ],
    weights=[
        big"0.82373073956971141166e-1",
        big"0.82373073956971141166e-1",
        big"0.82373073956971141166e-1",
        big"0.82373073956971141166e-1",
        #
        big"0.39089597169698608216e-1",
        big"0.39089597169698608216e-1",
        big"0.39089597169698608216e-1",
        big"0.39089597169698608216e-1",
        big"0.39089597169698608216e-1",
        big"0.39089597169698608216e-1",
        big"0.39089597169698608216e-1",
        big"0.39089597169698608216e-1",
        #
        big"0.43953907332966785983",
        big"0.43953907332966785983",
        big"0.43953907332966785983",
        big"0.43953907332966785983",
        #
        big"0.23092842785903867626",
        big"0.23092842785903867626",
        big"0.23092842785903867626",
        big"0.23092842785903867626",
        #
        big"0.67592092205970002525",
    ],
)

# 25 points Gauss rule of order 9
g25 = (
    nodes=[
        [big"+0.90617984593866399280", big"+0.90617984593866399280"],
        [big"-0.90617984593866399280", big"+0.90617984593866399280"],
        [big"-0.90617984593866399280", big"-0.90617984593866399280"],
        [big"+0.90617984593866399280", big"-0.90617984593866399280"],
        #
        [big"+0.90617984593866399280", big"+0.53846931010568309104"],
        [big"-0.90617984593866399280", big"+0.53846931010568309104"],
        [big"-0.90617984593866399280", big"-0.53846931010568309104"],
        [big"+0.90617984593866399280", big"-0.53846931010568309104"],
        [big"+0.53846931010568309104", big"+0.90617984593866399280"],
        [big"+0.53846931010568309104", big"-0.90617984593866399280"],
        [big"-0.53846931010568309104", big"-0.90617984593866399280"],
        [big"-0.53846931010568309104", big"+0.90617984593866399280"],
        #
        [big"+0.53846931010568309104", big"+0.53846931010568309104"],
        [big"-0.53846931010568309104", big"+0.53846931010568309104"],
        [big"-0.53846931010568309104", big"-0.53846931010568309104"],
        [big"+0.53846931010568309104", big"-0.53846931010568309104"],
        #
        [big"+0.90617984593866399280", big" 0.00000000000000000000"],
        [big"-0.90617984593866399280", big" 0.00000000000000000000"],
        [big" 0.00000000000000000000", big"+0.90617984593866399280"],
        [big" 0.00000000000000000000", big"-0.90617984593866399280"],
        #
        [big" 0.00000000000000000000", big" 0.00000000000000000000"],
        #
        [big"+0.53846931010568309104", big" 0.00000000000000000000"],
        [big"-0.53846931010568309104", big" 0.00000000000000000000"],
        [big" 0.00000000000000000000", big"+0.53846931010568309104"],
        [big" 0.00000000000000000000", big"-0.53846931010568309104"],
    ],
    weights=[
        big"0.56134348862428635955e-1",
        big"0.56134348862428635955e-1",
        big"0.56134348862428635955e-1",
        big"0.56134348862428635955e-1",
        #
        big"0.11340000000000000000",
        big"0.11340000000000000000",
        big"0.11340000000000000000",
        big"0.11340000000000000000",
        big"0.11340000000000000000",
        big"0.11340000000000000000",
        big"0.11340000000000000000",
        big"0.11340000000000000000",
        #
        big"0.22908540022399111713",
        big"0.22908540022399111713",
        big"0.22908540022399111713",
        big"0.22908540022399111713",
        #
        big"0.13478507238752090312",
        big"0.13478507238752090312",
        big"0.13478507238752090312",
        big"0.13478507238752090312",
        #
        big"0.32363456790123456790",
        #
        big"0.27228653255075070182",
        big"0.27228653255075070182",
        big"0.27228653255075070182",
        big"0.27228653255075070182",
    ],
)

for (name, cbt, n) in [("CH21", ch21, 19), ("G25", g25, 19)]
    println(">> $name <<")

    local Φ = HAI.map_to_reference(square)
    local j =
        HAI.abs_det_jacobian(HAI.reference_rectangle(BigFloat)) /
        HAI.abs_det_jacobian(square)

    fmt_node = Format("[\"%.$(n)e\", \"%.$(n)e\"],")
    for x in cbt[:nodes]
        local v = Φ(SVector{2}(x))
        println(format(fmt_node, v[1], v[2]))
    end
    println()

    fmt_weight = Format("\"%.$(n)e\",")
    for w in cbt[:weights]
        println(format(fmt_weight, j * w))
    end
    println()
end
