"""
    struct Quadrature{N,T}

Simple structure to store a quadrature rule. The structure has three fields:
- `nodes`: a Vector of SVector{N,T} where N is the dimension of the domain and T
  is the type of the nodes
- `weights`: a Vector of T where T is the type of the weights
- `name`: a String to identify the quadrature rule

The employed naming convention is `DOMAIN_RULE_ORDER_NPOINTS`` where:
- DOMAIN is the name of the domain (e.g. SEGMENT, TRIANGLE, SQUARE),
- RULE is a descriptive name of the quadrature rule (e.g. GAUSS, KRONROD),
- ORDER denotes the order of the quadrature rule, and
- NPOINTS is the number of points used
"""
struct Quadrature{N,T}
    nodes::Vector{SVector{N,T}}
    weights::Vector{T}
    name::String

    function Quadrature(nodes::Vector{SVector{N,T}}, weights::Vector{T}, name) where {N,T}
        @assert length(nodes) == length(weights) "Should have the same number of nodes as weights."
        return new{N,T}(nodes, weights, name)
    end
end

# convert types
function Quadrature{T}(quad::Quadrature{N}) where {N,T}
    nodes = SVector{N,T}.(quad.nodes)
    weights = T.(quad.weights)
    return Quadrature(nodes, weights, quad.name)
end

"""
    (quad::Quadrature)(fct::Function)

Compute `sum(quad.weights .* fct.(quad.nodes))`.
"""
function (quad::Quadrature)(fct::Function)
    return sum(w * fct(x) for (x, w) in zip(quad.nodes, quad.weights))
end

#=

Tabulated quadratures for supported domains. Naming convention is
DOMAIN_RULE_ORDER_NPOINTS where:
- DOMAIN is the name of the domain (e.g. SEGMENT, TRIANGLE),
- RULE is a descriptive name of the quadrature rule (e.g. GAUSS, KRONROD),
- ORDER denotes the order of the quadrature rule, and
- NPOINTS is the number of points

A given quadrature rule is represented by a tuple with two fields:
- nodes: a Vector of SVector{N,T} where N is the dimension of the domain and T
  is the type of the nodes
- weights: a Vector of T where T is the type of the weights

Whenever possible, extended precision is used for the nodes and weights.

=#

"""
    const SEGMENT_GAUSS_O13_N7

Reference: https://www.advanpix.com/2011/11/07/gauss-kronrod-quadrature-nodes-weights/
"""
const SEGMENT_GAUSS_O13_N7 = Quadrature(
    [
        SVector(2.54460438286207377369051579760743700e-02),
        SVector(1.29234407200302780068067613359605795e-01),
        SVector(2.97077424311301416546696793961519270e-01),
        SVector(5.00000000000000000000000000000000000e-01),
        SVector(7.02922575688698583453303206038480730e-01),
        SVector(8.70765592799697219931932386640394205e-01),
        SVector(9.74553956171379262263094842023925630e-01),
    ],
    [
        6.47424830844348466353057163395410100e-02,
        1.39852695744638333950733885711889790e-01,
        1.90915025252559472475184887744487565e-01,
        2.08979591836734693877551020408163265e-01,
        1.90915025252559472475184887744487565e-01,
        1.39852695744638333950733885711889790e-01,
        6.47424830844348466353057163395410100e-02,
    ],
    "SEGMENT_GAUSS_O13_N7",
)

"""
    const SEGMENT_KRONROD_O23_N15

Reference: https://www.advanpix.com/2011/11/07/gauss-kronrod-quadrature-nodes-weights/
"""
const SEGMENT_KRONROD_O23_N15 = Quadrature(
    [
        SVector(2.54460438286207377369051579760743700e-02),
        SVector(1.29234407200302780068067613359605795e-01),
        SVector(2.97077424311301416546696793961519270e-01),
        SVector(5.00000000000000000000000000000000000e-01),
        SVector(7.02922575688698583453303206038480730e-01),
        SVector(8.70765592799697219931932386640394205e-01),
        SVector(9.74553956171379262263094842023925630e-01),
        #
        SVector(4.27231443959368039657265123683574000e-03),
        SVector(6.75677883201154636051436056795369000e-02),
        SVector(2.06956382266154434852927580870635200e-01),
        SVector(3.96107522496050766199655298113377545e-01),
        SVector(6.03892477503949233800344701886622455e-01),
        SVector(7.93043617733845565147072419129364800e-01),
        SVector(9.32432211679884536394856394320463100e-01),
        SVector(9.95727685560406319603427348763164260e-01),
    ],
    [
        3.15460463149892766453503315946021435e-02,
        7.03266298577629593725947952551189600e-02,
        9.51752890323927049566282012105068400e-02,
        1.04741070542363914006499587445857130e-01,
        9.51752890323927049566282012105068400e-02,
        7.03266298577629593725947952551189600e-02,
        3.15460463149892766453503315946021435e-02,
        #
        1.14676610052646124818660040294847960e-02,
        5.23950051611250919199381612707590100e-02,
        8.45023633196339514132917132992751400e-02,
        1.02216470037649446207080999617324540e-01,
        1.02216470037649446207080999617324540e-01,
        8.45023633196339514132917132992751400e-02,
        5.23950051611250919199381612707590100e-02,
        1.14676610052646124818660040294847960e-02,
    ],
    "SEGMENT_KRONROD_O23_N15",
)

# TODO: extended precision version
"""
    const TRIANGLE_RADON_O5_N7

Reference:
https://www.math.unipd.it/~alvise/SETS_CUBATURE_TRIANGLE/radon/set_radon_standard.m
"""
const TRIANGLE_RADON_O5_N7 = Quadrature(
    [
        SVector(0.3333333333333333, 0.3333333333333333),
        SVector(0.7974269853530872, 0.1012865073234563),
        SVector(0.1012865073234563, 0.7974269853530872),
        SVector(0.1012865073234563, 0.1012865073234563),
        SVector(0.0597158717897698, 0.4701420641051151),
        SVector(0.4701420641051151, 0.0597158717897698),
        SVector(0.4701420641051151, 0.4701420641051151),
    ],
    [
        0.22500000000000000 / 2,
        0.12593918054482717 / 2,
        0.12593918054482717 / 2,
        0.12593918054482717 / 2,
        0.13239415278850616 / 2,
        0.13239415278850616 / 2,
        0.13239415278850616 / 2,
    ],
    "TRIANGLE_RADON_O5_N7",
)

# TODO: extended precision version
"""
    const TRIANGLE_LAURIE_O8_N19

Reference:
https://www.math.unipd.it/~alvise/SETS_CUBATURE_TRIANGLE/laurie/set_laurie_standard.m
"""
const TRIANGLE_LAURIE_O8_N19 = Quadrature(
    [
        SVector(0.3333333333333333, 0.3333333333333333),
        SVector(0.7974269853530872, 0.1012865073234563),
        SVector(0.1012865073234563, 0.7974269853530872),
        SVector(0.1012865073234563, 0.1012865073234563),
        SVector(0.0597158717897698, 0.4701420641051151),
        SVector(0.4701420641051151, 0.0597158717897698),
        SVector(0.4701420641051151, 0.4701420641051151),
        #
        SVector(0.5357953464498992, 0.2321023267750504),
        SVector(0.2321023267750504, 0.5357953464498992),
        SVector(0.2321023267750504, 0.2321023267750504),
        SVector(0.9410382782311209, 0.0294808608844396),
        SVector(0.0294808608844396, 0.9410382782311209),
        SVector(0.0294808608844396, 0.0294808608844396),
        SVector(0.7384168123405100, 0.2321023267750504),
        SVector(0.7384168123405100, 0.0294808608844396),
        SVector(0.2321023267750504, 0.7384168123405100),
        SVector(0.2321023267750504, 0.0294808608844396),
        SVector(0.0294808608844396, 0.7384168123405100),
        SVector(0.0294808608844396, 0.2321023267750504),
    ],
    [
        0.0378610912003147 / 2,
        0.0376204254131829 / 2,
        0.0376204254131829 / 2,
        0.0376204254131829 / 2,
        0.0783573522441174 / 2,
        0.0783573522441174 / 2,
        0.0783573522441174 / 2,
        0.1162714796569659 / 2,
        0.1162714796569659 / 2,
        0.1162714796569659 / 2,
        0.0134442673751655 / 2,
        0.0134442673751655 / 2,
        0.0134442673751655 / 2,
        0.0375097224552317 / 2,
        0.0375097224552317 / 2,
        0.0375097224552317 / 2,
        0.0375097224552317 / 2,
        0.0375097224552317 / 2,
        0.0375097224552317 / 2,
    ],
    "TRIANGLE_RADON_O5_N7",
)

"""
    const SQUARE_GAUSS_O9_N25

Tensor product quadrature of Gauss-Legendre quadrature with 5 points in each direction.
"""
const SQUARE_GAUSS_O9_N25 = Quadrature(
    map(
        x -> (x .+ 1) ./ 2,
        SVector{2,Float64}[
            [
                -0.90617984593866396370032134655048139393329620361328125,
                -0.90617984593866396370032134655048139393329620361328125,
            ],
            [
                -0.53846931010568310771446931539685465395450592041015625,
                -0.90617984593866396370032134655048139393329620361328125,
            ],
            [0.0, -0.90617984593866396370032134655048139393329620361328125],
            [
                0.53846931010568310771446931539685465395450592041015625,
                -0.90617984593866396370032134655048139393329620361328125,
            ],
            [
                0.90617984593866396370032134655048139393329620361328125,
                -0.90617984593866396370032134655048139393329620361328125,
            ],
            [
                -0.90617984593866396370032134655048139393329620361328125,
                -0.53846931010568310771446931539685465395450592041015625,
            ],
            [
                -0.53846931010568310771446931539685465395450592041015625,
                -0.53846931010568310771446931539685465395450592041015625,
            ],
            # [0.0, -0.53846931010568310771446931539685465395450592041015625],
            [
                0.53846931010568310771446931539685465395450592041015625,
                -0.53846931010568310771446931539685465395450592041015625,
            ],
            [
                0.90617984593866396370032134655048139393329620361328125,
                -0.53846931010568310771446931539685465395450592041015625,
            ],
            [-0.90617984593866396370032134655048139393329620361328125, 0.0],
            # [-0.53846931010568310771446931539685465395450592041015625, 0.0],
            [0.0, 0.0],
            # [0.53846931010568310771446931539685465395450592041015625, 0.0],
            [0.90617984593866396370032134655048139393329620361328125, 0.0],
            [
                -0.90617984593866396370032134655048139393329620361328125,
                0.53846931010568310771446931539685465395450592041015625,
            ],
            [
                -0.53846931010568310771446931539685465395450592041015625,
                0.53846931010568310771446931539685465395450592041015625,
            ],
            # [0.0, 0.53846931010568310771446931539685465395450592041015625],
            [
                0.53846931010568310771446931539685465395450592041015625,
                0.53846931010568310771446931539685465395450592041015625,
            ],
            [
                0.90617984593866396370032134655048139393329620361328125,
                0.53846931010568310771446931539685465395450592041015625,
            ],
            [
                -0.90617984593866396370032134655048139393329620361328125,
                0.90617984593866396370032134655048139393329620361328125,
            ],
            [
                -0.53846931010568310771446931539685465395450592041015625,
                0.90617984593866396370032134655048139393329620361328125,
            ],
            [0.0, 0.90617984593866396370032134655048139393329620361328125],
            [
                0.53846931010568310771446931539685465395450592041015625,
                0.90617984593866396370032134655048139393329620361328125,
            ],
            [
                0.90617984593866396370032134655048139393329620361328125,
                0.90617984593866396370032134655048139393329620361328125,
            ],
            [0.0, -0.53846931010568310771446931539685465395450592041015625],
            [-0.53846931010568310771446931539685465395450592041015625, 0.0],
            [0.53846931010568310771446931539685465395450592041015625, 0.0],
            [0.0, 0.53846931010568310771446931539685465395450592041015625],
        ],
    ),
    [
        0.05613434886242863471556829809025905468983371940377914671773540303614802304821296,
        0.1133999999999999994264263637635250440559397338544542161656071565817988089364121,
        0.1347850723875209015147276299569842228861844167257207742333148807641063360307498,
        0.1133999999999999994264263637635250440559397338544542161656071565817988089364121,
        0.05613434886242863471556829809025905468983371940377914671773540303614802304821296,
        0.1133999999999999994264263637635250440559397338544542161656071565817988089364121,
        0.2290854042239911198710770622140986656704242502657180386525725496399755187759695,
        0.2290854042239911198710770622140986656704242502657180386525725496399755187759695,
        0.1133999999999999994264263637635250440559397338544542161656071565817988089364121,
        0.1347850723875209015147276299569842228861844167257207742333148807641063360307498,
        0.3236345679012345673398180853253529398020934506854974708060890633588846387880267,
        0.1347850723875209015147276299569842228861844167257207742333148807641063360307498,
        0.1133999999999999994264263637635250440559397338544542161656071565817988089364121,
        0.2290854042239911198710770622140986656704242502657180386525725496399755187759695,
        0.2290854042239911198710770622140986656704242502657180386525725496399755187759695,
        0.1133999999999999994264263637635250440559397338544542161656071565817988089364121,
        0.05613434886242863471556829809025905468983371940377914671773540303614802304821296,
        0.1133999999999999994264263637635250440559397338544542161656071565817988089364121,
        0.1347850723875209015147276299569842228861844167257207742333148807641063360307498,
        0.1133999999999999994264263637635250440559397338544542161656071565817988089364121,
        0.05613434886242863471556829809025905468983371940377914671773540303614802304821296,
        0.2722865325507507032108197608802697336911547832244992403636405875564513445752368,
        0.2722865325507507032108197608802697336911547832244992403636405875564513445752368,
        0.2722865325507507032108197608802697336911547832244992403636405875564513445752368,
        0.2722865325507507032108197608802697336911547832244992403636405875564513445752368,
    ] ./ 4,
    "SQUARE_GAUSS_O9_N25",
)

"""
    const SQUARE_CH21_G25_O8_N25

Quadrature rule embedded in a [`SQUARE_GAUSS_O9_N25`](@ref) for the square domain.

Reference: https://link.springer.com/article/10.1007/BF01389339
"""
const SQUARE_CH21_G25_O7_N21 = Quadrature(
    map(
        x -> (x .+ 1) ./ 2,
        SVector{2,Float64}[
            [
                -0.90617984593866396370032134655048139393329620361328125,
                -0.90617984593866396370032134655048139393329620361328125,
            ],
            [
                -0.53846931010568310771446931539685465395450592041015625,
                -0.90617984593866396370032134655048139393329620361328125,
            ],
            [0.0, -0.90617984593866396370032134655048139393329620361328125],
            [
                0.53846931010568310771446931539685465395450592041015625,
                -0.90617984593866396370032134655048139393329620361328125,
            ],
            [
                0.90617984593866396370032134655048139393329620361328125,
                -0.90617984593866396370032134655048139393329620361328125,
            ],
            [
                -0.90617984593866396370032134655048139393329620361328125,
                -0.53846931010568310771446931539685465395450592041015625,
            ],
            [
                -0.53846931010568310771446931539685465395450592041015625,
                -0.53846931010568310771446931539685465395450592041015625,
            ],
            # [0.0, -0.53846931010568310771446931539685465395450592041015625],
            [
                0.53846931010568310771446931539685465395450592041015625,
                -0.53846931010568310771446931539685465395450592041015625,
            ],
            [
                0.90617984593866396370032134655048139393329620361328125,
                -0.53846931010568310771446931539685465395450592041015625,
            ],
            [-0.90617984593866396370032134655048139393329620361328125, 0.0],
            # [-0.53846931010568310771446931539685465395450592041015625, 0.0],
            [0.0, 0.0],
            # [0.53846931010568310771446931539685465395450592041015625, 0.0],
            [0.90617984593866396370032134655048139393329620361328125, 0.0],
            [
                -0.90617984593866396370032134655048139393329620361328125,
                0.53846931010568310771446931539685465395450592041015625,
            ],
            [
                -0.53846931010568310771446931539685465395450592041015625,
                0.53846931010568310771446931539685465395450592041015625,
            ],
            # [0.0, 0.53846931010568310771446931539685465395450592041015625],
            [
                0.53846931010568310771446931539685465395450592041015625,
                0.53846931010568310771446931539685465395450592041015625,
            ],
            [
                0.90617984593866396370032134655048139393329620361328125,
                0.53846931010568310771446931539685465395450592041015625,
            ],
            [
                -0.90617984593866396370032134655048139393329620361328125,
                0.90617984593866396370032134655048139393329620361328125,
            ],
            [
                -0.53846931010568310771446931539685465395450592041015625,
                0.90617984593866396370032134655048139393329620361328125,
            ],
            [0.0, 0.90617984593866396370032134655048139393329620361328125],
            [
                0.53846931010568310771446931539685465395450592041015625,
                0.90617984593866396370032134655048139393329620361328125,
            ],
            [
                0.90617984593866396370032134655048139393329620361328125,
                0.90617984593866396370032134655048139393329620361328125,
            ],
        ],
    ), # nodes
    [
        0.082373073956971141166,
        0.039089597169698608216,
        0.23092842785903867626,
        0.039089597169698608216,
        0.082373073956971141166,
        0.039089597169698608216,
        0.43953907332966785983,
        #0.2722865325507507,
        0.43953907332966785983,
        0.039089597169698608216,
        0.23092842785903867626,
        #0.2722865325507507,
        0.67592092205970002525,
        #0.2722865325507507,
        0.23092842785903867626,
        0.039089597169698608216,
        0.43953907332966785983,
        #0.2722865325507507,
        0.43953907332966785983,
        0.039089597169698608216,
        0.082373073956971141166,
        0.039089597169698608216,
        0.23092842785903867626,
        0.039089597169698608216,
        0.082373073956971141166,
    ] ./ 4, # weights
    "SQUARE_CH21_G25_O7_N21", # name
)

# TODO: implement SQUARE_CH21_G25_O7_N21, SQUARE_CH21_G25_O5_N13, etc...
